{"mappings":"+BAEMA,EAAMC,SAASC,cAAa,gBAC5BC,EAAqBF,SAASC,cAAa,cAI3CE,GAHkBH,SAASC,cAAa,WAG3B,SAAaG,EAAMC,EAAS,UACrCC,EAAI,iCACgBD,gDACWD,EAAKG,oFAEVH,EAAKI,kDACHJ,EAAKK,+DACGL,EAAKM,WAAKC,gFAA4BP,EAClCQ,+DAAiBR,EAAAS,WACX,GAAY,iDAIhEX,EAAmBY,mBAAkB,YAAcR,GACnDJ,EAAmBa,MAAMC,QAAU,IAwCjCC,EAAUC,2BAGFC,YARCC,SAAO,CAAEC,EAASC,KACzBC,UAAUC,YAAYC,mBAAmBJ,EAASC,OAQ1CI,SAAUC,EAAKC,UAAWC,GAAQV,EAAIW,OAGxCC,QAAeC,MAAK,uBAAwBL,KAAOE,oBACpDE,EAAOE,GAAE,MAAA,IAAYC,MAAK,4CACzBC,QAAgBJ,EAAOK,OAGvBC,QAAYL,MAAK,yCAA0CG,EAAQG,WACnElC,QAAaiC,EAAID,OACvBjC,EAAcC,EAAK,iBAGMA,EAAK,GAAGmC,SACtBC,SAAOtB,eAAiBuB,SACzBC,QAAiBV,MAAK,yCAA0CS,KAChEE,QAAkBD,EAASN,OACjCjC,EAAcwC,EAAU,GAAC,8BAGRR,EAAQS,SAAST,EAAQG,gBAEzCO,SA/DiBC,EAgEX,MAAID,EAAEE,UA/DrB7C,EAAmB8C,mBAAkB,YAAcF,GAkEzCD,EAnEG,IAAaC,GAgF9B/C,EAAIkD,iBAAgB,SAAQ,KACxBhC,IAAaiC,MAAKb,GAAOtC,EAAIoD,YAAcd,IAC3CtC,EAAIqD,UAAUC,IAAG","sources":["script.js"],"sourcesContent":["'use strict';\n\nconst btn = document.querySelector('.btn-country');\nconst countriesContainer = document.querySelector('.countries');\nconst imagesContainer = document.querySelector('.images');\n\n//////////////////////////////////////////////////////////\nconst renderCountry = function (data, className = '') {\n    const html = `\n    <article class=\"country ${className}\" >\n        <img class=\"country__img\" src=\"${data.flag}\" />\n        <div class=\"country__data\">\n        <h3 class=\"country__name\">${data.name}</h3>\n        <h4 class=\"country__region\">${data.region}</h4>\n        <p class=\"country__row\"><span>üë´</span>${data.population.toLocaleString()} people</p>\n        <p class=\"country__row\"><span>üó£Ô∏è</span>${data.demonym}</p>\n        <p class=\"country__row\"><span>üí∞</span>${data.currencies[0]['name']}</p>\n        </div>\n    </article>\n    `;\n    countriesContainer.insertAdjacentHTML('beforeend', html);\n    countriesContainer.style.opacity = 1;\n}\n\nconst renderError = function (msg) {\n    countriesContainer.insertAdjacentText('beforeend', msg);\n}\n\n// const getJSON = function (url, errMsg = 'Something went wrong') {\n//     return fetch(url)\n//         .then(response => {\n//             if (!response.ok) throw new Error(`${errMsg} ${response.status}`)\n//             return response.json()\n//         })\n// }\n\n// const getCountryData = function (country) {\n//     // Country 1\n//     getJSON(`https://restcountries.eu/rest/v2/name/${country}`, 'Country not found')\n//         .then(data => {\n//             renderCountry(data[0]);\n//             const neighbour = data[0].borders[0];\n//             if (!neighbour) throw new Error('No neighbour can be found');\n\n//             // Country 2\n//             return getJSON(`https://restcountries.eu/rest/v2/name/${neighbour}`).then(data => renderCountry(data[0], 'neighbour'))\n\n//         }).catch(err => {\n//             console.error(err);\n//             renderError(`Something went wrong ~ ${err}`)\n//         }).finally(() => {\n//             countriesContainer.style.opacity = 1;\n//         });\n// }\n\nconst getPosition = function () {\n    return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject)\n    })\n}\n\nconst getCountry = async function () {\n    try {\n        //Geolocation\n        const pos = await getPosition();\n        const { latitude: lat, longitude: lng } = pos.coords;\n\n        //Reverse geocoding\n        const resGeo = await fetch(`https://geocode.xyz/${lat},${lng}?geoit=json`);\n        if (!resGeo.ok) throw new Error('Problem with getting location data')\n        const dataGeo = await resGeo.json();\n\n        //Country data\n        const res = await fetch(`https://restcountries.eu/rest/v2/name/${dataGeo.country}`);\n        const data = await res.json();\n        renderCountry(data[0]);\n\n        //Get neighbours\n        const neighbours = await data[0].borders;\n        neighbours.forEach(async function (neighb) {\n            const neighRes = await fetch(`https://restcountries.eu/rest/v2/name/${neighb}`);\n            const neighData = await neighRes.json();\n            renderCountry(neighData[0], 'neighbour');\n        });\n\n        return `You are in ${dataGeo.city}, ${dataGeo.country}`\n\n    } catch (err) {\n        renderError(`üí£ ${err.message}`);\n\n        //Reject promise returned from asnyc function\n        throw err;\n    }\n};\n\n// (async function () {\n//     try {\n//         const city = await getCountry();\n//         console.log(`2: ${city}`);\n//     } catch (err) {\n//         console.error(`2: ${err.message}`)\n//     }\n//     console.log('3: Finished loading country');\n// })();\nbtn.addEventListener('click', () => {\n    getCountry().then(res => btn.textContent = res)\n    btn.classList.add('btn-country--disabled');\n})\n\n\n///////////////////// Coding Challenge #1///////////////////////////\n\nconst wait = function (second) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, second * 1000)\n    })\n}\n\nconst createImage = function (imgPath) {\n    return new Promise((resolve, reject) => {\n        const imgEl = document.createElement('img');\n        imgEl.src = imgPath;\n\n        imgEl.addEventListener('load', () => {\n            imagesContainer.append(imgEl);\n            resolve(imgEl);\n        });\n\n        imgEl.addEventListener('error', () => {\n            reject(new Error('Image not found!'));\n        })\n    })\n}\n\nlet currentImageEl;\n// createImage('img/img-1.jpg')\n//     .then(img => {\n//         currentImageEl = img;\n//         console.log('Image 1 loaded');\n//         return wait(2);\n//     })\n//     .then(() => {\n//         currentImageEl.style.display = 'none';\n//         return createImage('img/img-2.jpg')\n//     })\n//     .then(img2 => {\n//         currentImageEl = img2;\n//         console.log('Image 2 loaded');\n//         return wait(2)\n//     })\n//     .then(() => {\n//         currentImageEl.style.display = 'none';\n//     })\n//     .catch(err => console.error(err));\n\nconst loadNPause = async function () {\n    try {\n        //load img1\n        const img1 = await createImage('img/img-1.jpg');\n\n        //wait 2 seconds, then hide img1\n        await wait(2);\n        img1.style.display = 'none';\n\n        await wait(2);\n\n        //load img2\n        const img2 = await createImage('img/img-2.jpg');\n        await wait(2);\n        img2.style.display = 'none';\n    } catch (err) {\n        console.error(err);\n    }\n}\n\n//loadNPause()\n\nconst loadAll = async function (imgArr) {\n    try {\n        const imgs = imgArr.map(async img => await createImage(img));\n        //  console.log(imgs);\n\n        const imgsEl = await Promise.all(imgs);\n        //  console.log(imgsEl);\n\n        imgsEl.forEach(img => img.classList.add('parallel'))\n\n    } catch (err) {\n        console.error(err);\n    }\n\n    //  Promise.all([createImage(imgArr[0]), createImage(imgArr[1]), createImage(imgArr[2])])\n}\n//loadAll(['img/img-1.jpg', 'img/img-2.jpg', 'img/img-3.jpg'])\n"],"names":["$7e7826c51b2a67966a0c063b231575d8$var$btn","document","querySelector","$7e7826c51b2a67966a0c063b231575d8$var$countriesContainer","$7e7826c51b2a67966a0c063b231575d8$var$renderCountry","data","className","html","flag","name","region","population","toLocaleString","demonym","currencies","insertAdjacentHTML","style","opacity","$7e7826c51b2a67966a0c063b231575d8$var$getCountry","async","pos","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","latitude","lat","longitude","lng","coords","resGeo","fetch","ok","Error","dataGeo","json","res","country","borders","forEach","neighb","neighRes","neighData","city","err","msg","message","insertAdjacentText","addEventListener","then","textContent","classList","add"],"version":3,"file":"index.19b300bf.js.map"}